
// Question: Here we need to sort the vowel of a string given, and string may consist small and capital letter also. we need to sort the vowel of that string.




Solution:- (1)
--------------
#include<iostream>
using namespace std;

string sortVowels(string s) {
    
    // create two vector that would store the vowel of upper and lower case letter
      
    vector<int> lower(26, 0);
    vector<int> upper(26, 0);
    
    // Iterate over the string
    for(int i=0; i<s.size(); i++){
      // lower - a, e, i, o, u
      if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u'){
        lower[s[i] - 'a']++;
        s[i] = '#';
      }
      // upper - A, E, I, O, U
      else if(s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'){
        upper[s[i] - 'A']++;
        s[i] = '#';
      }
    }
    
    
    
    // Now, we have to iterate over the vector and find out the vowel either in lower or upper case letter
    
    string vowel;
    // upper
    for(int i=0; i<26; i++){
      char ch = 'A' + i;    // it would get the character in upper case letter
      while(upper[i]){
        vowel += ch;
        upper[i]--;
      }
    }
    
    // lower
    for(int i=0; i<26; i++){
      char ch = 'a' + i;    // it would get the character in lower case letter
      while(lower[i]){
        vowel += ch;
        lower[i]--;
      }
    }
    
    
    
    // Now we got the vowel in a string, we have to arrange/put that at the place where we have the symbol as '#'.
    
    // take two poniter of integer type as first = 0, and second = 0.
    int first  = 0, second = 0;   // here first points to the original string s, and second points kar rha vowel wali string ke index ke liye
    while(second < vowel.size())
    {
      if(s[first] == '#')
      {
        s[first] = vowel[second];
        second++;
      }
      
      first++;
    }
    
    return s;
  }


int main() {
string s;
cout << "Enter a string: ";
cin >> str;


// function call 
string result = sortVowels(s);
cout << "Result: "  << result << endl;


return 0;
}
