Question: 3Sum
link:



Solution:-
-----------


C++
======
vector<vector<int>> threeSum(vector<int>& arr) {
  int n = arr.size();    // size of vector
  
  // sort the vector
  sort(arr.begin(), arr.end());
  
  vector<vector<int>> results;
  
  for(int i=0; i<n-2; i++){
    // Skip duplicates
    if (i > 0 && arr[i] == arr[i - 1]) continue;
    int left = i+1, right = n-1;
    
    while(left < right){
      int sum = arr[i] + arr[left] + arr[right];
      
      if(sum == 0){
        results.push_back({arr[i], arr[left], arr[right]});
        // Skip duplicates
        while(left < right && arr[left] == arr[left+1]) left++;
            while(left < right && arr[right] == arr[right-1]) right--;
        
        left++;
        right--;
      } else if (sum < 0){
        left++;
      } else {
        right--;
      }
    }
  }
  
  return results;
}







Java
=======
class Solution {
public List<List<Integer>> threeSum(int[] nums) {
    Arrays.sort(nums);

    List<List<Integer>> ans = new ArrayList<>();

    int n = nums.length;

    for (int i = 0; i < n - 2 && nums[i] <= 0; ++i) {

        if (i > 0 && nums[i] == nums[i - 1]) {

            continue;

        }

        int j = i + 1, k = n - 1;

        while (j < k) {

            int x = nums[i] + nums[j] + nums[k];

            if (x < 0) {

                ++j;

            } else if (x > 0) {

                --k;

            } else {

                ans.add(List.of(nums[i], nums[j++], nums[k--]));

                while (j < k && nums[j] == nums[j - 1]) {

                    ++j;

                }

                while (j < k && nums[k] == nums[k + 1]) {

                    --k;

                }

            }

        }

    }

    return ans;
}
}