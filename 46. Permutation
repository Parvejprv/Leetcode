
Question :
-------------
46. Permutations
Medium

19113

329

Add to List

Share
Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
Example 2:

Input: nums = [0,1]
Output: [[0,1],[1,0]]
Example 3:

Input: nums = [1]
Output: [[1]]
 

Constraints:

1 <= nums.length <= 6
-10 <= nums[i] <= 10
All the integers of nums are unique.







Solution: (here we are using a track of elements using two extra array of size n)
----------------------------------
CPP




class Solution {
public:
    void permute(vector<int>& nums, vector<vector<int>>&ans, vector<int>&temp, vector<bool>& visited, int n) {
      // Base case
      if(temp.size() == n) {
        ans.push_back(temp);
        return;
      }


        // Run a loop over the original size or temp arr size
      for(int i=0; i<n; i++){
        // Check if I visited elements or not
        if(visited[i] == 0){
          // Mark the current element as visited
          visited[i] = 1;
          // push the original array current element to the temp array
          temp.push_back(nums[i]);     // array ki current value ko temp arr mein push kar do
          // Recursive call to permute the rest of the array
          permute(nums, ans, temp, visited, n);
          // Backtrack by unmarking the current element as visited
          visited[i] = 0;
          // do pop operation after completed the previous task
          temp.pop_back();
        }
      }

    }
  
    vector<vector<int>> permute(vector<int>& nums) {
        int n = nums.size();
        vector<vector<int>> ans;
        vector<int> temp;
        vector<bool> visited(n, 0);
        permute(nums, ans, temp, visited, n);
        return ans;
    }
};











// Without using any track i.e. don't use any extra array (i'm using here swapping only).

Solution 2. Without using any extra spaces or track


CPP
-------

class Solution {
public:
    void permute(vector<int>& arr, vector<vector<int>>&ans, int index) {

      // Base case
      if (index == arr.size() - 1) {
        ans.push_back(arr);
        return;
      }


      // Run a loop over the elements
      for(int i=index; i<arr.size(); i++){
        // Swap the current element with the first element of the array
        swap(arr[i], arr[index]);
        // Call the recursive function again for the next iteration, with next index
        permute(arr, ans, index+1);
        // Swap the elements back to their original positions
        swap(arr[i], arr[index]);
      }

    }
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> ans;
        int index = 0;
        permute(nums, ans, index);
        return ans;
    }
};







